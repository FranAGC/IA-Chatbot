
const dotenv = require('dotenv')

const result = dotenv.config()
 
if (result.error) {
  throw result.error
}

const app = require('../app');
const debug = require('debug')('testecomtensorflow:server');
const http = require('http');

//obtenemos puerto de las variables de entorno o utilizamos el definido por defecto

const port = normalizePort(process.env.PORT || '3007');
app.set('port', port);

//Creamos server http

const server = http.createServer(app);


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

//Listener para del server error

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  //Manejo de errores
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' se necesitan permisos de adminstrador');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Escuchando en ' + bind);
}
